# If the superstate has impassed on pick-up, start the pick-up process

############## GRASP FIRST ################
sp {pick-up*propose*get-grasp-target
   (state <s> ^name pick-up
              ^target-object
              ^svs.command <cmd>)
   (<cmd> -^extract_once.type grasp_first)
-->
   (<s> ^operator <o> +)
   (<o> ^name get-grasp-target)
}

sp {pick-up*apply*get-grasp-target
   (state <s> ^name pick-up
              ^target-object <id>
              ^svs.command <cmd>
              ^operator.name get-grasp-target)
-->
   (<cmd> ^extract_once <eo> )
   (<eo> ^type grasp_first
         ^a <a>
         ^frame self)
   (<a> ^type node
        ^id <id>)
}

############## FIND TRAJECTORIES ################
sp {pick-up*propose*make-find-trajectories
   (state <s> ^name pick-up
              ^svs.command <cmd>
              ^target-pose <t>)
   (<cmd> -^find-trajectories)
-->
   (<s> ^operator <o> +)
   (<o> ^name make-find-trajectories)
}

sp {pick-up*apply*make-find-trajectories
   (state <s> ^name pick-up
              ^svs.command <cmd>
              ^target-pose <tp>
              ^operator.name make-find-trajectories)
   (<tp> ^x <px>
         ^y <py>
         ^z <pz>
         ^roll <rx>
         ^pitch <ry>
         ^yaw <rz>)
-->
   (<cmd> ^find-trajectories <ft>)
   (<ft> ^target <t>
         ^min-number 6
         ^max-number 10
         ^target-samples 5)
   (<t> ^center <c>
        ^orientation <or>
#        ^orientation-flex 0.01
        ^frame self)
   (<c> ^x <px>
        ^y <py>
        ^z <pz>)
   (<or> ^x <rx>
         ^y <ry>
         ^z <rz>)
}

############## SELECT TRAJECTORY ################

# Let the agent stop a command if needed before doing selection
sp {pick-up*prefer*stop-over-select
   (state <s> ^name pick-up
              ^operator <op1> +
              ^operator <op2> +)
   (<op1> ^name stop-command)
   (<op2> ^name make-select)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {pick-up*propose*make-select
   (state <s> ^name pick-up
              ^svs <v>)
   (<v> ^command <cmd>
        ^motor.trajectories <t>)
   (<cmd> ^find-trajectories <ft>)
   (<ft> ^id <sid>
         ^status << stopped complete >> )
   (<t> ^set <st>)
   (<st> ^command-id <sid>
        -^trajectory.selected-by waypoints)
-->
   (<s> ^operator <o> +)
   (<o> ^name make-select
        ^trajectory-set <sid>)
}

sp {pick-up*apply*make-select
   (state <s> ^name pick-up
              ^svs <v>
              ^operator <op>)
   (<op> ^name make-select
         ^trajectory-set <sid>)
   (<v> ^command <c>)
-->
   (<c> ^evaluate-trajectories <eval>)
   (<eval> ^set-id <sid>
           ^type select
           ^objective waypoints
           ^number 1)
}

############## EXEC TRAJECTORY ################
sp {pick-up*propose*make-execute
   (state <s> ^name pick-up
              ^svs <svs>)
   (<svs> ^motor.trajectories <t>
          ^command <cmd>)
   (<cmd> ^find-trajectories.id <sid>
         -^execute-trajectory)
   (<t> ^set <st>)
   (<st> ^command-id <sid>
         ^trajectory <tr>)
   (<tr> ^id <tid>
         ^selected-by waypoints)
-->
   (<s> ^operator <o> +)
   (<o> ^name make-execute
        ^trajectory-set <sid>
        ^trajectory-id <tid>)
}

sp {pick-up*apply*make-execute
   (state <s> ^name pick-up
              ^svs <v>
              ^operator <op>)
   (<op> ^name make-execute
         ^trajectory-set <sid>
         ^trajectory-id <tid>)
   (<v> ^command <c>)
-->
   (<c> ^execute-trajectory <x>)
   (<x> ^set-id <sid>
        ^trajectory-id <tid>)
}

############## GRASP SECOND ################
sp {pick-up*propose*get-final-grasp
   (state <s> ^name pick-up
              ^target-object
              ^svs.command <cmd>)
   (<cmd> ^execute-trajectory <x>
         -^extract_once.type grasp_second)
   (<x> ^status finished)
-->
   (<s> ^operator <o> +)
   (<o> ^name get-final-grasp)
}

sp {pick-up*apply*get-final-grasp
   (state <s> ^name pick-up
              ^target-object <id>
              ^svs.command <cmd>
              ^operator.name get-final-grasp)
-->
   (<cmd> ^extract_once <eo> )
   (<eo> ^type grasp_second
         ^a <a>
         ^frame self)
   (<a> ^type node
        ^id <id>)
}

############## STRAIGHT LINE IN ################
sp {pick-up*propose*do-straight-line-in
   (state <s> ^name pick-up
              ^final-pose
              ^svs.command <cmd>)
   (<cmd> -^straight-line-motion)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-straight-line-in)
}

sp {pick-up*apply*do-straight-line-in
   (state <s> ^name pick-up
              ^final-pose <p>
              ^svs.command <cmd>
              ^operator.name do-straight-line-in)
   (<p> ^x <px>
        ^y <py>
        ^z <pz>)
-->
   (<cmd> ^straight-line-motion <sl> )
   (<sl> ^target <xyz>)
   (<xyz> ^x <px>
          ^y <py>
          ^z <pz>)
}

############## CLOSE GRIPPER ################
sp {pick-up*propose*close-gripper
   (state <s> ^name pick-up
              ^svs.command <cmd>)
   (<cmd> ^straight-line-motion <sl>
         -^set-gripper)
   (<sl> ^status finished)
-->
   (<s> ^operator <o> +)
   (<o> ^name close-gripper)
}

sp {pick-up*apply*close-gripper
   (state <s> ^name pick-up
              ^svs.command <cmd>
              ^operator.name close-gripper)
-->
   (<cmd> ^set-gripper <sg> )
   (<sg> ^target 0.0)
}

############## STRAIGHT LINE OUT ################
sp {pick-up*propose*do-straight-line-out
   (state <s> ^name pick-up
              ^target-pose
              ^svs.command <cmd>)
   (<cmd> ^set-gripper <cg>)
   (<cg> ^status finished)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-straight-line-out)
}

sp {pick-up*apply*do-straight-line-out
   (state <s> ^name pick-up
              ^target-pose <p>
              ^svs.command <cmd>
              ^operator.name do-straight-line-out)
   (<p> ^x <px>
        ^y <py>
        ^z <pz>)
-->
   (<cmd> ^straight-line-motion <sl> )
   (<sl> ^target <xyz>)
   (<xyz> ^x <px>
          ^y <py>
          ^z <pz>)
}
